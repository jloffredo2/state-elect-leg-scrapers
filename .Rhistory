TRUE ~ bill_number
)
vote_files <- retrieve_vote_files(session, bill_number)
bill_id = 'HB 1103'
bill_id <- str_replace_all(bill_id, " ", "")
url <- glue("https://capitol.texas.gov/BillLookup/Actions.aspx?LegSess={session}&Bill={bill_id}")
url
# Retrieve the HTML
html <- read_html(url)
# Get the text links in html format
journals <- html |> html_elements(".houvote , .senvote") |> html_attr("href") |> str_subset("journals")
journals <- case_when(
str_detect(journals,"hjrnl") ~ glue("ftp://ftp.legis.state.tx.us/journals/{session}/pdf/house/{basename(journals)}"),
str_detect(journals,"sjrnl") ~ glue("ftp://ftp.legis.state.tx.us/journals/{session}/pdf/senate/{basename(journals)}"),
)
unique(journals)
bill_number <- str_remove_all(UUID, "^TX[0-9]{4}")
bill_number <- case_when(
str_detect(bill_number, "^S[0-9]") ~ glue("SB {str_remove(bill_number, 'S')}"),
str_detect(bill_number, "^H[0-9]") ~ glue("HB {str_remove(bill_number, 'H')}"),
TRUE ~ glue("{str_extract(bill_number, '^[A-Z]+')} {str_extract(bill_number, '[0-9]+')}")
)
bill_number_full <- case_when(
str_detect(bill_number, "SB") ~ glue("SENATE BILL {str_remove(bill_number, 'SB ')}"),
str_detect(bill_number, "HB") ~ glue("HOUSE BILL {str_remove(bill_number, 'HB ')}"),
str_detect(bill_number, "HJR") ~ glue("HOUSE JOINT RESOLUTION {str_remove(bill_number, 'HJR ')}"),
str_detect(bill_number, "SJR") ~ glue("SENATE JOINT RESOLUTION {str_remove(bill_number, 'SJR ')}"),
str_detect(bill_number, "HR") ~ glue("HOUSE RESOLUTION {str_remove(bill_number, 'HR ')}"),
str_detect(bill_number, "SR") ~ glue("SENATE RESOLUTION {str_remove(bill_number, 'SR ')}"),
str_detect(bill_number, "HCR") ~ glue("HOUSE CONCURRENT RESOLUTION {str_remove(bill_number, 'HCR ')}"),
str_detect(bill_number, "SCR") ~ glue("SENATE CONCURRENT RESOLUTION {str_remove(bill_number, 'SCR ')}"),
TRUE ~ bill_number
)
vote_files <- retrieve_vote_files(session, bill_number)
if(!is_empty(vote_files)){
print(glue("Processing {UUID}"))
processed_text <- vote_files |> map(~ download_vote_page(UUID, .x))
parsed_votes <- processed_text |> map(~ parse_rollcall(.x, bill_number, bill_number_full))
} else {
print(glue("No votes found for {UUID}"))
return(NULL)
}
UUID = tx_master[100]
year <- str_extract(UUID, "[0-9]{4}")
session <- case_match(
year,
"2012" ~ "82R",
"2011" ~ "82R",
"2010" ~ "81R",
"2009" ~ "81R"
)
bill_number <- str_remove_all(UUID, "^TX[0-9]{4}")
bill_number <- case_when(
str_detect(bill_number, "^S[0-9]") ~ glue("SB {str_remove(bill_number, 'S')}"),
str_detect(bill_number, "^H[0-9]") ~ glue("HB {str_remove(bill_number, 'H')}"),
TRUE ~ glue("{str_extract(bill_number, '^[A-Z]+')} {str_extract(bill_number, '[0-9]+')}")
)
bill_number_full <- case_when(
str_detect(bill_number, "SB") ~ glue("SENATE BILL {str_remove(bill_number, 'SB ')}"),
str_detect(bill_number, "HB") ~ glue("HOUSE BILL {str_remove(bill_number, 'HB ')}"),
str_detect(bill_number, "HJR") ~ glue("HOUSE JOINT RESOLUTION {str_remove(bill_number, 'HJR ')}"),
str_detect(bill_number, "SJR") ~ glue("SENATE JOINT RESOLUTION {str_remove(bill_number, 'SJR ')}"),
str_detect(bill_number, "HR") ~ glue("HOUSE RESOLUTION {str_remove(bill_number, 'HR ')}"),
str_detect(bill_number, "SR") ~ glue("SENATE RESOLUTION {str_remove(bill_number, 'SR ')}"),
str_detect(bill_number, "HCR") ~ glue("HOUSE CONCURRENT RESOLUTION {str_remove(bill_number, 'HCR ')}"),
str_detect(bill_number, "SCR") ~ glue("SENATE CONCURRENT RESOLUTION {str_remove(bill_number, 'SCR ')}"),
TRUE ~ bill_number
)
vote_files <- retrieve_vote_files(session, bill_number)
UUID = tx_master[200]
year <- str_extract(UUID, "[0-9]{4}")
session <- case_match(
year,
"2012" ~ "82R",
"2011" ~ "82R",
"2010" ~ "81R",
"2009" ~ "81R"
)
bill_number <- str_remove_all(UUID, "^TX[0-9]{4}")
bill_number <- case_when(
str_detect(bill_number, "^S[0-9]") ~ glue("SB {str_remove(bill_number, 'S')}"),
str_detect(bill_number, "^H[0-9]") ~ glue("HB {str_remove(bill_number, 'H')}"),
TRUE ~ glue("{str_extract(bill_number, '^[A-Z]+')} {str_extract(bill_number, '[0-9]+')}")
)
bill_number_full <- case_when(
str_detect(bill_number, "SB") ~ glue("SENATE BILL {str_remove(bill_number, 'SB ')}"),
str_detect(bill_number, "HB") ~ glue("HOUSE BILL {str_remove(bill_number, 'HB ')}"),
str_detect(bill_number, "HJR") ~ glue("HOUSE JOINT RESOLUTION {str_remove(bill_number, 'HJR ')}"),
str_detect(bill_number, "SJR") ~ glue("SENATE JOINT RESOLUTION {str_remove(bill_number, 'SJR ')}"),
str_detect(bill_number, "HR") ~ glue("HOUSE RESOLUTION {str_remove(bill_number, 'HR ')}"),
str_detect(bill_number, "SR") ~ glue("SENATE RESOLUTION {str_remove(bill_number, 'SR ')}"),
str_detect(bill_number, "HCR") ~ glue("HOUSE CONCURRENT RESOLUTION {str_remove(bill_number, 'HCR ')}"),
str_detect(bill_number, "SCR") ~ glue("SENATE CONCURRENT RESOLUTION {str_remove(bill_number, 'SCR ')}"),
TRUE ~ bill_number
)
vote_files <- retrieve_vote_files(session, bill_number)
vote_files
processed_text <- vote_files |> map(~ download_vote_page(UUID, .x))
View(processed_text)
source_python("TX/code/parse_votes.py")
# Use state website to see all text versions
retrieve_vote_files <- function(session, bill_id){
bill_id <- str_replace_all(bill_id, " ", "")
url <- glue("https://capitol.texas.gov/BillLookup/Actions.aspx?LegSess={session}&Bill={bill_id}")
# Retrieve the HTML
html <- read_html(url)
# Get the text links in html format
journals <- html |> html_elements(".houvote , .senvote") |> html_attr("href") |> str_subset("journals")
journals <- case_when(
str_detect(journals,"hjrnl") ~ glue("ftp://ftp.legis.state.tx.us/journals/{session}/pdf/house/{basename(journals)}"),
str_detect(journals,"sjrnl") ~ glue("ftp://ftp.legis.state.tx.us/journals/{session}/pdf/senate/{basename(journals)}"),
)
unique(journals)
}
# Download html files
download_vote_page <- function(UUID, file_path){
VOTE_OUTPUT_PATH <- '/Users/josephloffredo/MIT Dropbox/Joseph Loffredo/previous_leg_files/TX'
dir_create(glue("{VOTE_OUTPUT_PATH}/{UUID}"))
page_number <- basename(file_path) |> str_extract("#page=[0-9]+") |> str_remove("#page=") |> as.integer()
file_name <- basename(file_path) |> str_remove_all(".PDF#page=[0-9]+")
# Create destination file name
raw_dest_file <- glue("{VOTE_OUTPUT_PATH}/{UUID}/{file_name}.pdf")
download_ftp_file(file_path, raw_dest_file)
start_page <- ifelse(page_number > 10, page_number - 1 , 1)
end_page <- page_number + 1
text <- pdf_text(raw_dest_file) |> str_trim() |> str_replace_all('(  +)', " ")
text <- text[c(1, start_page:end_page)] |> unique() |> str_c(collapse = " ")
# Create destination file name
processed_dest_file <- glue("{VOTE_OUTPUT_PATH}/{UUID}/{file_name}.txt")
write(text, processed_dest_file)
return(tibble(UUID = UUID, file_path = raw_dest_file, text = text))
}
year <- str_extract(UUID, "[0-9]{4}")
session <- case_match(
year,
"2012" ~ "82R",
"2011" ~ "82R",
"2010" ~ "81R",
"2009" ~ "81R"
)
bill_number <- str_remove_all(UUID, "^TX[0-9]{4}")
bill_number <- case_when(
str_detect(bill_number, "^S[0-9]") ~ glue("SB {str_remove(bill_number, 'S')}"),
str_detect(bill_number, "^H[0-9]") ~ glue("HB {str_remove(bill_number, 'H')}"),
TRUE ~ glue("{str_extract(bill_number, '^[A-Z]+')} {str_extract(bill_number, '[0-9]+')}")
)
bill_number_full <- case_when(
str_detect(bill_number, "SB") ~ glue("SENATE BILL {str_remove(bill_number, 'SB ')}"),
str_detect(bill_number, "HB") ~ glue("HOUSE BILL {str_remove(bill_number, 'HB ')}"),
str_detect(bill_number, "HJR") ~ glue("HOUSE JOINT RESOLUTION {str_remove(bill_number, 'HJR ')}"),
str_detect(bill_number, "SJR") ~ glue("SENATE JOINT RESOLUTION {str_remove(bill_number, 'SJR ')}"),
str_detect(bill_number, "HR") ~ glue("HOUSE RESOLUTION {str_remove(bill_number, 'HR ')}"),
str_detect(bill_number, "SR") ~ glue("SENATE RESOLUTION {str_remove(bill_number, 'SR ')}"),
str_detect(bill_number, "HCR") ~ glue("HOUSE CONCURRENT RESOLUTION {str_remove(bill_number, 'HCR ')}"),
str_detect(bill_number, "SCR") ~ glue("SENATE CONCURRENT RESOLUTION {str_remove(bill_number, 'SCR ')}"),
TRUE ~ bill_number
)
vote_files <- retrieve_vote_files(session, bill_number)
processed_text <- vote_files |> map(~ download_vote_page(UUID, .x)) |>
parsed_votes <- processed_text |> map(~ parse_rollcall(.x, bill_number, bill_number_full))
processed_text <- vote_files |> map(~ download_vote_page(UUID, .x))
View(processed_text)
processed_text <- vote_files |> map(~ download_vote_page(UUID, .x)) |> flatten()
View(processed_text)
processed_text <- vote_files |> map(~ download_vote_page(UUID, .x))
processed_text |> bind_rows()
processed_text <- vote_files |> map(~ download_vote_page(UUID, .x)) |> bind_rows()
parsed_votes <- pmap_dfr(list(processed_text$text, bill_number, bill_number_full), parse_rollcall)
reticulate::repl_python()
processed_text <- vote_files |> map(~ download_vote_page(UUID, .x)) |> bind_rows()
##################################################
## Project: State Election Legislation Scrapers
## Script purpose: Scrape TX Votes
## Date: February 2025
## Author: Joe Loffredo
##################################################
rm(list = ls())
gc()
library(tidyverse)
library(rvest)
library(glue)
library(threadr)
library(fs)
library(googlesheets4)
library(pdftools)
library(tesseract)
library(reticulate)
source_python("TX/code/parse_votes.py")
# Use state website to see all text versions
retrieve_vote_files <- function(session, bill_id){
bill_id <- str_replace_all(bill_id, " ", "")
url <- glue("https://capitol.texas.gov/BillLookup/Actions.aspx?LegSess={session}&Bill={bill_id}")
# Retrieve the HTML
html <- read_html(url)
# Get the text links in html format
journals <- html |> html_elements(".houvote , .senvote") |> html_attr("href") |> str_subset("journals")
journals <- case_when(
str_detect(journals,"hjrnl") ~ glue("ftp://ftp.legis.state.tx.us/journals/{session}/pdf/house/{basename(journals)}"),
str_detect(journals,"sjrnl") ~ glue("ftp://ftp.legis.state.tx.us/journals/{session}/pdf/senate/{basename(journals)}"),
)
unique(journals)
}
# Download html files
download_vote_page <- function(UUID, file_path){
VOTE_OUTPUT_PATH <- '/Users/josephloffredo/MIT Dropbox/Joseph Loffredo/previous_leg_files/TX'
dir_create(glue("{VOTE_OUTPUT_PATH}/{UUID}"))
page_number <- basename(file_path) |> str_extract("#page=[0-9]+") |> str_remove("#page=") |> as.integer()
file_name <- basename(file_path) |> str_remove_all(".PDF#page=[0-9]+")
# Create destination file name
raw_dest_file <- glue("{VOTE_OUTPUT_PATH}/{UUID}/{file_name}.pdf")
download_ftp_file(file_path, raw_dest_file)
start_page <- ifelse(page_number > 10, page_number - 1 , 1)
end_page <- page_number + 1
text <- pdf_text(raw_dest_file) |> str_trim() |> str_replace_all('(  +)', " ")
text <- text[c(1, start_page:end_page)] |> unique() |> str_c(collapse = " ")
# Create destination file name
processed_dest_file <- glue("{VOTE_OUTPUT_PATH}/{UUID}/{file_name}.txt")
write(text, processed_dest_file)
return(tibble(UUID = UUID, file_path = raw_dest_file, text = text))
}
UUID = 'TX2010S212'
year <- str_extract(UUID, "[0-9]{4}")
session <- case_match(
year,
"2012" ~ "82R",
"2011" ~ "82R",
"2010" ~ "81R",
"2009" ~ "81R"
)
bill_number <- str_remove_all(UUID, "^TX[0-9]{4}")
bill_number <- case_when(
str_detect(bill_number, "^S[0-9]") ~ glue("SB {str_remove(bill_number, 'S')}"),
str_detect(bill_number, "^H[0-9]") ~ glue("HB {str_remove(bill_number, 'H')}"),
TRUE ~ glue("{str_extract(bill_number, '^[A-Z]+')} {str_extract(bill_number, '[0-9]+')}")
)
bill_number_full <- case_when(
str_detect(bill_number, "SB") ~ glue("SENATE BILL {str_remove(bill_number, 'SB ')}"),
str_detect(bill_number, "HB") ~ glue("HOUSE BILL {str_remove(bill_number, 'HB ')}"),
str_detect(bill_number, "HJR") ~ glue("HOUSE JOINT RESOLUTION {str_remove(bill_number, 'HJR ')}"),
str_detect(bill_number, "SJR") ~ glue("SENATE JOINT RESOLUTION {str_remove(bill_number, 'SJR ')}"),
str_detect(bill_number, "HR") ~ glue("HOUSE RESOLUTION {str_remove(bill_number, 'HR ')}"),
str_detect(bill_number, "SR") ~ glue("SENATE RESOLUTION {str_remove(bill_number, 'SR ')}"),
str_detect(bill_number, "HCR") ~ glue("HOUSE CONCURRENT RESOLUTION {str_remove(bill_number, 'HCR ')}"),
str_detect(bill_number, "SCR") ~ glue("SENATE CONCURRENT RESOLUTION {str_remove(bill_number, 'SCR ')}"),
TRUE ~ bill_number
)
vote_files <- retrieve_vote_files(session, bill_number)
processed_text <- vote_files |> map(~ download_vote_page(UUID, .x)) |> bind_rows()
parsed_votes <- pmap_dfr(list(processed_text$text, bill_number, bill_number_full), parse_rollcall)
parsed_votes <- sapply(processed_text$text, parse_rollcall, bill_number, bill_number_full)
reticulate::py_install("openai==1.59.5")
source_python("group_positions/wa_parse_committee_reports.py")
# Load libraries
library(tidyverse)
library(rvest)
library(glue)
library(reticulate)
library(purrr)
library(fs)
library(pdftools)
library(tesseract)
library(furrr)
library(DBI)
library(jsonlite)
library(tidyverse)
library(rvest)
library(glue)
library(threadr)
library(fs)
library(googlesheets4)
library(pdftools)
library(tesseract)
library(reticulate)
source_python("TX/code/parse_votes.py")
parsed_votes <- sapply(processed_text$text, parse_rollcall, bill_number, bill_number_full)
reticulate::py_last_error()
reticulate::py_install("openai==1.55.2")
library(tidyverse)
library(rvest)
library(glue)
library(threadr)
library(fs)
library(googlesheets4)
library(pdftools)
library(tesseract)
library(reticulate)
source_python("TX/code/parse_votes.py")
source_python("TX/code/parse_votes.py")
rm(list = ls())
gc()
library(tidyverse)
library(rvest)
library(glue)
library(threadr)
library(fs)
library(googlesheets4)
library(pdftools)
library(tesseract)
library(reticulate)
source_python("TX/code/parse_votes.py")
renv::snapshot()
rm(list = ls())
gc()
library(tidyverse)
library(rvest)
library(glue)
library(threadr)
library(fs)
library(googlesheets4)
library(pdftools)
library(tesseract)
library(reticulate)
source_python("TX/code/parse_votes.py")
reticulate::py_install("openai")
renv::use_python()
reticulate::py_install("openai")
library(tidyverse)
library(rvest)
library(glue)
library(threadr)
library(fs)
library(googlesheets4)
library(pdftools)
library(tesseract)
library(reticulate)
source_python("TX/code/parse_votes.py")
rm(list = ls())
gc()
library(tidyverse)
library(rvest)
library(glue)
library(threadr)
library(fs)
library(googlesheets4)
library(pdftools)
library(tesseract)
library(reticulate)
source_python("TX/code/parse_votes.py")
# Use state website to see all text versions
retrieve_vote_files <- function(session, bill_id){
bill_id <- str_replace_all(bill_id, " ", "")
url <- glue("https://capitol.texas.gov/BillLookup/Actions.aspx?LegSess={session}&Bill={bill_id}")
# Retrieve the HTML
html <- read_html(url)
# Get the text links in html format
journals <- html |> html_elements(".houvote , .senvote") |> html_attr("href") |> str_subset("journals")
journals <- case_when(
str_detect(journals,"hjrnl") ~ glue("ftp://ftp.legis.state.tx.us/journals/{session}/pdf/house/{basename(journals)}"),
str_detect(journals,"sjrnl") ~ glue("ftp://ftp.legis.state.tx.us/journals/{session}/pdf/senate/{basename(journals)}"),
)
unique(journals)
}
# Download html files
download_vote_page <- function(UUID, file_path){
VOTE_OUTPUT_PATH <- '/Users/josephloffredo/MIT Dropbox/Joseph Loffredo/previous_leg_files/TX'
dir_create(glue("{VOTE_OUTPUT_PATH}/{UUID}"))
page_number <- basename(file_path) |> str_extract("#page=[0-9]+") |> str_remove("#page=") |> as.integer()
file_name <- basename(file_path) |> str_remove_all(".PDF#page=[0-9]+")
# Create destination file name
raw_dest_file <- glue("{VOTE_OUTPUT_PATH}/{UUID}/{file_name}.pdf")
download_ftp_file(file_path, raw_dest_file)
start_page <- ifelse(page_number > 10, page_number - 1 , 1)
end_page <- page_number + 1
text <- pdf_text(raw_dest_file) |> str_trim() |> str_replace_all('(  +)', " ")
text <- text[c(1, start_page:end_page)] |> unique() |> str_c(collapse = " ")
# Create destination file name
processed_dest_file <- glue("{VOTE_OUTPUT_PATH}/{UUID}/{file_name}.txt")
write(text, processed_dest_file)
return(tibble(UUID = UUID, file_path = raw_dest_file, text = text))
}
UUID = 'TX2010S212'
year <- str_extract(UUID, "[0-9]{4}")
session <- case_match(
year,
"2012" ~ "82R",
"2011" ~ "82R",
"2010" ~ "81R",
"2009" ~ "81R"
)
bill_number <- str_remove_all(UUID, "^TX[0-9]{4}")
bill_number <- case_when(
str_detect(bill_number, "^S[0-9]") ~ glue("SB {str_remove(bill_number, 'S')}"),
str_detect(bill_number, "^H[0-9]") ~ glue("HB {str_remove(bill_number, 'H')}"),
TRUE ~ glue("{str_extract(bill_number, '^[A-Z]+')} {str_extract(bill_number, '[0-9]+')}")
)
bill_number_full <- case_when(
str_detect(bill_number, "SB") ~ glue("SENATE BILL {str_remove(bill_number, 'SB ')}"),
str_detect(bill_number, "HB") ~ glue("HOUSE BILL {str_remove(bill_number, 'HB ')}"),
str_detect(bill_number, "HJR") ~ glue("HOUSE JOINT RESOLUTION {str_remove(bill_number, 'HJR ')}"),
str_detect(bill_number, "SJR") ~ glue("SENATE JOINT RESOLUTION {str_remove(bill_number, 'SJR ')}"),
str_detect(bill_number, "HR") ~ glue("HOUSE RESOLUTION {str_remove(bill_number, 'HR ')}"),
str_detect(bill_number, "SR") ~ glue("SENATE RESOLUTION {str_remove(bill_number, 'SR ')}"),
str_detect(bill_number, "HCR") ~ glue("HOUSE CONCURRENT RESOLUTION {str_remove(bill_number, 'HCR ')}"),
str_detect(bill_number, "SCR") ~ glue("SENATE CONCURRENT RESOLUTION {str_remove(bill_number, 'SCR ')}"),
TRUE ~ bill_number
)
vote_files <- retrieve_vote_files(session, bill_number)
print(glue("Processing {UUID}"))
processed_text <- vote_files |> map(~ download_vote_page(UUID, .x)) |> bind_rows()
parsed_votes <- sapply(processed_text$text, parse_rollcall, bill_number, bill_number_full)
reticulate::py_last_error()
source_python("TX/code/parse_votes.py")
parsed_votes <- sapply(processed_text$text, parse_rollcall, bill_number, bill_number_full)
reticulate::py_install("pydantic")
source_python("TX/code/parse_votes.py")
reticulate::py_install("pydantic")
parsed_votes <- sapply(processed_text$text, parse_rollcall, bill_number, bill_number_full)
source_python("TX/code/parse_votes.py")
parsed_votes <- sapply(processed_text$text, parse_rollcall, bill_number, bill_number_full)
reticulate::py_run_string("import openai; print(openai.__version__)")
reticulate::py_install("openai==1.54.0")
reticulate::py_run_string("import openai; print(openai.__version__)")
reticulate::py_run_string("import openai; print(openai.__version__)")
source_python("TX/code/parse_votes.py")
library(tidyverse)
library(rvest)
library(glue)
library(threadr)
library(fs)
library(googlesheets4)
library(pdftools)
library(tesseract)
library(reticulate)
source_python("TX/code/parse_votes.py")
reticulate::py_last_error()
source_python("TX/code/parse_votes.py")
reticulate::py_install("openai")
library(tidyverse)
library(rvest)
library(glue)
library(threadr)
library(fs)
library(googlesheets4)
library(pdftools)
library(tesseract)
library(reticulate)
source_python("TX/code/parse_votes.py")
parsed_votes <- sapply(processed_text$text, parse_rollcall, bill_number, bill_number_full)
source_python("TX/code/parse_votes.py")
parsed_votes <- sapply(processed_text$text, parse_rollcall, bill_number, bill_number_full)
View(parsed_votes)
parsed_votes[2]
source_python("TX/code/parse_votes.py")
parsed_votes <- sapply(processed_text$text, parse_rollcall, bill_number, bill_number_full)
View(parsed_votes)
parsed_votes[2]
bill_id = 'SB 212'
bill_id <- str_replace_all(bill_id, " ", "")
url <- glue("https://capitol.texas.gov/BillLookup/Actions.aspx?LegSess={session}&Bill={bill_id}")
url
tst = ['Williams', 'Zaffirini', 'Shapleigh', 'Carona', 'Lucio', 'Van de Putte', 'Hegar', 'Jackson', 'Estes', 'Fletcher', 'Bohac', 'Berman', 'Alonzo', 'Alvarado', 'Anchia', 'Anderson', 'Bolton', 'Bonnen', 'Branch', 'Brown', 'Castro', 'Farias', 'Farrar', 'Flores', 'Flynn', 'Frost', 'Gallego', 'Gattis', 'Geren', 'Giddings', 'Pierson']
test = c('Williams', 'Zaffirini', 'Shapleigh', 'Carona', 'Lucio', 'Van de Putte', 'Hegar', 'Jackson', 'Estes', 'Fletcher', 'Bohac', 'Berman', 'Alonzo', 'Alvarado', 'Anchia', 'Anderson', 'Bolton', 'Bonnen', 'Branch', 'Brown', 'Castro', 'Farias', 'Farrar', 'Flores', 'Flynn', 'Frost', 'Gallego', 'Gattis', 'Geren', 'Giddings', 'Pierson')
source_python("TX/code/parse_votes.py")
parsed_votes <- sapply(processed_text$text, parse_rollcall, bill_number, bill_number_full)
parsed_votes <- processed_text |> mutate(parsed = map(text, parse_rollcall, bill_number, bill_number_full))
View(parsed_votes)
View(parsed_votes[[4]][[1]])
parsed_votes[[4]][[1]][["response"]]
parsed_votes |> unnest(parsed)
parsed_votes |> unnest_wider(parsed)
View(parsed_votes)
View(parsed_votes[[4]][[1]])
test = parsed_votes |> unnest(parsed)
View(test)
test = parsed_votes |> unnest_wider(parsed)
text()
text
View(parsed_votes)
View(parsed_votes[[4]][[1]])
source_python("TX/code/parse_votes.py")
parsed_votes <- processed_text |> mutate(parsed = map(text, parse_rollcall, bill_number, bill_number_full))
source_python("TX/code/parse_votes.py")
parsed_votes <- processed_text |> mutate(parsed = map(text, parse_rollcall, bill_number, bill_number_full))
View(parsed_votes)
View(parsed_votes[[4]][[1]])
parsed_votes[[4]][[1]][["response"]]
processed_text$text
reticulate::repl_python()
reticulate::repl_python()
source_python("TX/code/parse_votes.py")
library(tidyverse)
library(rvest)
library(glue)
library(threadr)
library(fs)
library(googlesheets4)
library(pdftools)
library(tesseract)
library(reticulate)
source_python("TX/code/parse_votes.py")
parsed_votes <- processed_text |> mutate(parsed = map(text, parse_rollcall, bill_number, bill_number_full))
View(parsed_votes)
View(parsed_votes[[4]][[1]])
parsed_votes[[4]][[1]][["response"]]
test = parsed_votes |> unnest_wider(parsed)
View(test)
test[1,"response"]
test[1,"response"] |> to_json()
test[1,"response"]
test[1,"response"] |> print()
test[1,"response"] |> as.character()
source_python("TX/code/parse_votes.py")
parsed_votes <- processed_text |> mutate(parsed = map(text, parse_rollcall, bill_number, bill_number_full))
View(parsed_votes)
View(parsed_votes[[4]][[1]])
parsed_votes$parsed
source_python("TX/code/parse_votes.py")
parsed_votes <- processed_text |> mutate(parsed = map(text, parse_rollcall, bill_number, bill_number_full))
View(parsed_votes)
View(parsed_votes[[4]][[1]])
parsed_votes[[4]][[1]][["response"]]
reticulate::repl_python()
