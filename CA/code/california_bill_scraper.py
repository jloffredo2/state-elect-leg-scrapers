# -*- coding: utf-8 -*-
"""California_Bill_Scraper.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1vdybxAiYHfTzKo7PB4Zfr4NCtkYb-EBM
"""

!pip install requests
!pip install beautifulsoup4

import requests
from bs4 import BeautifulSoup
import json

URLS = "http://leginfo.ca.gov/pub/99-00/bill/asm/ab_1351-1400/ab_1377_bill_20001130_status.html"
page = requests.get(URLS)

#prints page text
#print(page.text)

soup = BeautifulSoup(page.text, "html")

#print(soup)

print(soup.prettify())

#--------------------------------------------
#Bill Metadata
#--------------------------------------------

#--------------------------------------------
#Retrieves State Bill ID from "MEASURE"
#--------------------------------------------

bill_metadata_stid = soup.select('meta[name="MEASURE"]')
print(bill_metadata_stid[0].attrs["content"])

#--------------------------------------------
#Retrieves Title from "TITLE"
#--------------------------------------------

#Extract <pre> content
pre_content = soup.find('pre').get_text()

#Extract lines starting from TITLE until <br> tag
lines = []
title = False
for line in pre_content.splitlines():
    if line.startswith('TITLE'):
        title = True
    if title:
        lines.append(line.strip())
    if '<br/>' in line:
        break

#Combine extracted lines
bill_metadata_title = " ".join(lines)
print(bill_metadata_title)

#--------------------------------------------
#Retrieves Status from "LAST HIST ACTION"
#--------------------------------------------

#Extract <pre> content
pre_content = soup.find('pre').get_text()

for line in pre_content.splitlines():
    if line.startswith('LAST HIST. ACTION'):
        bill_metadata_status = line.split(':', 1)[1].strip()
        print(bill_metadata_status)
        break

#--------------------------------------------
#Convert to JSON Object
#--------------------------------------------

#NEED TO DO

def json_from_html_using_bs4(base_url):

<p> tag in
        # instock availability class.
        instock = book.find('p', attrs={'class':
                        'instock availability'}).text.strip()

        # Create a dictionary with the above book information
        data = {'book no': str(book_no), 'title': title,
            'rating': stars, 'price': price, 'link': link,
            'stock': instock}

        # Append the dictionary to the list
        res.append(data)
        book_no += 1
    return res
        # instock availability class.
        instock = book.find('p', attrs={'class':
                        'instock availability'}).text.strip()

        # Create a dictionary with the above book information
        data = {'book no': str(book_no), 'title': title,
            'rating': stars, 'price': price, 'link': link,
            'stock': instock}

        # Append the dictionary to the list
        res.append(data)
        book_no += 1
    return res

#--------------------------------------------
#Bill Sponsors
#--------------------------------------------

#--------------------------------------------
#Retrieves State Bill ID from "MEASURE"
#--------------------------------------------

bill_sponsor_stid = soup.select('meta[name="MEASURE"]')
print(bill_sponsor_stid[0].attrs["content"])

#--------------------------------------------
# Retrieves Sponsor from "AUTHOR"
#--------------------------------------------

bill_sponsor_sponsor = soup.select('meta[name="AUTHOR"]')[0].attrs["content"].strip().rstrip(".")

#--------------------------------------------
# Retrieves Sponsor from "COAUTHOR"
#--------------------------------------------

bill_sponsor_cosponsor = soup.select('meta[name="COAUTHOR"]')[0].attrs["content"].strip().rstrip(".")

#--------------------------------------------
# Check if both are the same
#--------------------------------------------

if bill_sponsor_cosponsor == bill_sponsor_sponsor:
    bill_sponsor_cosponsor = None

print(bill_sponsor_sponsor)
print(bill_sponsor_cosponsor)

#--------------------------------------------
#Bill History
#--------------------------------------------

URLH = "http://leginfo.ca.gov/pub/99-00/bill/asm/ab_1351-1400/ab_1377_bill_20001130_history.html"
page2 = requests.get(URLH)

#prints page2 text
#print(page2.text)

soup2 = BeautifulSoup(page2.text, "html")

#print(soup)
print(soup2.prettify())

#--------------------------------------------
#Retrieves State Bill ID from "MEASURE"
#--------------------------------------------

bill_history_stid = soup2.select('meta[name="MEASURE"]')
print(bill_history_stid[0].attrs["content"])

#--------------------------------------------
#Retrieves Bill History
#--------------------------------------------

#NEED TO DO

#--------------------------------------------
#Bill Votes
#--------------------------------------------

URLV = "http://leginfo.ca.gov/pub/99-00/bill/asm/ab_1351-1400/ab_1377_vote_20000828_0243PM_sen_floor.html"

page3 = requests.get(URLV)

#prints page3 text
#print(page3.text)

soup3 = BeautifulSoup(page3.text, "html")

#print(soup3)
print(soup3.prettify())

#--------------------------------------------
#Retrieves Date from "DATE"
#--------------------------------------------

#Extract <pre> content
pre_content = soup3.find('pre').get_text()

for line in pre_content.splitlines():
    if line.startswith('DATE'):
        bill_votes_date = line.split(':', 1)[1].strip()
        print(bill_votes_date)
        break

#--------------------------------------------
#Retrieves Description from "MOTION"
#--------------------------------------------

#Extract <pre> content
pre_content = soup3.find('pre').get_text()

#Extract lines starting from MOTION until AYES
lines = []
motion = False
for line in pre_content.splitlines():
    if line.startswith('MOTION'):
        motion = True
    if motion:
        lines.append(line.strip())
    if 'AYES' in line:
        break

#Combine extracted lines
bill_votes_descrp = " ".join(lines)
print(bill_votes_descrp)

#--------------------------------------------
#Retrieves Description from "MOTION"
#--------------------------------------------

# Extract the <pre> block containing vote information
pre_block = soup.find('pre')

# Initialize counters
ayes_count = 0
noes_count = 0
absent_count = 0

if pre_block:
    pre_text = pre_block.get_text()

    # Extract sections
    ayes_section = pre_text.split("AYES\n****\n")[-1].split("\n\n")[0]
    noes_section = pre_text.split("NOES\n****\n")[-1].split("\n\n")[0]
    absent_section = pre_text.split("ABSENT, ABSTAINING, OR NOT VOTING\n*********************************\n")[-1]

    # Count AYES
    ayes_list = ayes_section.split()
    ayes_count = len(ayes_list)

    # Count NOES
    noes_list = noes_section.split()
    noes_count = len(noes_list)

    # Count ABSENT, ABSTAINING, OR NOT VOTING
    absent_list = absent_section.split()
    absent_count = len(absent_list)

# Print results
print("Count of AYES:", ayes_count)
print("Count of NOES:", noes_count)
print("Count of ABSENT, ABSTAINING, OR NOT VOTING:", absent_count)